Q. 예제 6-4에서 for(i = 65; i <= 90; i ++)인데 왜 알파벳이 출력되는건가?
A. 아스키코드 때문이다. %c는 하나의 문자를 출력하는건데, 대문자 알파벳은 65부터 90이다.

Q. 예제 6-4를 소문자로 변환하는 법?
A. 마찬가지로 아스키코드를 사용하여, 
   for(i = 61; i <= 122 ; i ++)로 for문을 변경한다. 
A2. string 라이브러리에 속해있는 strlwr( ) 함수를 사용한다. 
for(i = 65; i <= 90; i ++)
{
  strlwr(i)
  printf("%c", i);
}
strlwr()함수를 사용하여 작성하면 굳이 초기값과 조건식을 건들지 않아도 소문자를 출력할 수 있다. 

Q. 다중for문이란?
A. 다중 for문은 말 그대로 for문 안에 또다른 for문이 있는 것이다.
예제를 실행해본 결과, 다중 for문의 실행순서는 마치 구구단과 같다는 것을 알 수 있었다. 
첫 번쨰 for문이 돌아가면 안에 있는 두번째 for문이 끝까지 증감된 다음에, 첫번째 for문이 한 번 증감되어 
또 다시 for문이 반복되는 형태를 보인다. 

Q.6-7 결과를 얻을 수 있는 방법? 
A. 6-7 결과만 놓고 봤을 때 얻을 수 있는 방법이 많지만, 일단 다중 for문을 이용하기 위해선 
첫번째 for문이 5번 실행되도록 제한하고 두번째 for문을 첫번째 for문에 유동적으로 실행되도록 해야겠다고 생각했다. 
첫번째 for문에 변수 i를 집어넣어 초기값을 1로 잡아주고 두번쨰 for문에는 변수 j를 집어넣어 초기값을 0으로 설정해줬다. 
그리고 두번째 for문의 조건식을 j < i로 하면, 두번째 for문이 첫번째 for문의 값을 넘지 않게 되면서 늘 첫번째 for문의 -1 개의 *이 출력된다.

Q. 예제 6-8의 해석은?
A. 예제 6-8은 소수를 구하는 것이 목표이기 때문에 첫번쨰 for문에서 변수 i의 초기값을 2로 잡아주고, 조건식을 i <= 100으로 설정함으로, 
숫자 2~100까지로 제한한다는 것을 알 수 있다. 
소수는 1과 자기 자신을 제외한 약수가 없는 수이다. 2를 제외한 짝수는 모두 약수가 될 수 없기 때문에 2번쨰 for문에서 만약 i % j의 나머지가 0인 경우
break가 걸려 반복문을 빠져나가게 했다. 
